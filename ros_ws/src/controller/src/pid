#!/usr/bin/env python3
import rospy
import numpy as np

from MCSimPython.control.basic import PID

from std_msgs.msg import Float64MultiArray


vessel_name = "CSAD"


class Controller (object):
    def __init__(self, dt=0.01) -> None:
        self.kp = np.array([25.0, 25.0, 5.0])*0.05  # Proportional gain
        self.kd = np.array([14, 15, 2.])*2.0  # Derivative gain
        self.ki = np.array([10, 5, .4])*0.005   # Integral gain

        self.pid = PID(kp=self.kp, kd=self.kd,
                       ki=self.ki, dt=dt)  # gains from MCSimPython package

        self.tau = np.zeros(3)  # Command forces [surge, sway, yaw]
        self.eta = np.zeros(3)  # Pose, attitude [surge, sway, yaw]
        self.nu = np.zeros(3)   # Velocity [surge, sway, yaw]
        self.int = np.zeros(3)  # Integral term

        self.eta_d = np.zeros(3)  # Desired pose, attitude [surge, sway, yaw]
        self.nu_d = np.zeros(3)   # Desired velocity [surge, sway, yaw]

        # Publishers/Subscribers
        self.odom_sub = rospy.Subscriber(
            f"/{vessel_name}/observer_states", Float64MultiArray, self.observerCallback, queue_size=1)  # Odometry subscriber
        # Desired state subscriber
        self.desiredState_sub = rospy.Subscriber(
            f"/{vessel_name}/reference", Float64MultiArray, self.referenceCallback, queue_size=1)
        self.gains_sub = rospy.Subscriber(
            f"/{vessel_name}/pid_gains", Float64MultiArray, self.gainsCallback, queue_size=1)
        self.tau_pub = rospy.Publisher(
            f"/{vessel_name}/tau_cmd", Float64MultiArray, queue_size=1)  # Odometry subscriber
        self.int_pub = rospy.Publisher(
            f"/{vessel_name}/integral", Float64MultiArray, queue_size=1)  # Odometry subscriber

        # Messages
        self.tau_msg = Float64MultiArray()  # command forces [surge, sway, yaw]
        self.int_msg = Float64MultiArray()
        
    def gainsCallback(self, msg):
        self.pid.set_kp([msg.data[0], msg.data[1], msg.data[2]])
        self.pid.set_ki([msg.data[3], msg.data[4], msg.data[5]])
        self.pid.set_kd([msg.data[6], msg.data[7], msg.data[8]])

    def observerCallback(self, msg):
        """
            Callback function for odometry message. Updating position and attitude of vessel.
        """
        self.eta = msg.data[0:3]
        self.nu = msg.data[3:6]

    def referenceCallback(self, msg):
        """
            Callback function for desired state message. Updating desired position/attitude and linear/angular velocity of vessel.
        """
        self.eta_d = np.array(msg.data[0:3])
        self.nu_d = np.array(msg.data[3:6])

    def update(self):
        """
            Calculate desired forces. [surge, sway, yaw]
        """
        # Calculate desired forces
        self.tau, self.int = self.pid.get_tau(self.eta, self.eta_d, self.nu, self.nu_d, return_integral=True)

    def publishTau(self):
        """
            Publish desired forces. [surge, sway, yaw]
        """
        self.tau_msg.data = self.tau
        self.tau_pub.publish(self.tau_msg)

    def publishInt(self):
            """
                Publish integral forces. [surge, sway, yaw]
            """
            self.int_msg.data = self.int
            self.int_pub.publish(self.int_msg)

if __name__ == '__main__':
    rospy.init_node("controller")
    rospy.loginfo(f"INITIALIZING {vessel_name} PID CONTROLLER NODE")
    r = rospy.Rate(100)
    dt = 0.01  # Timestep corresponding to sampling frequency of 100 Hz

    # initialize reference model
    controller = Controller(dt=dt)

    while not rospy.is_shutdown():
        # calculate command forces
        controller.update()

        # publish command forces
        controller.publishTau()
        controller.publishInt()

        r.sleep()

    rospy.spin()
